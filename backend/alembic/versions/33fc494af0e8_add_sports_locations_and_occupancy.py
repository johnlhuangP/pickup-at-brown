"""add sports locations and occupancy

Revision ID: 33fc494af0e8
Revises: d027c9093138
Create Date: 2024-12-06 12:39:10.403104

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '33fc494af0e8'
down_revision: Union[str, None] = 'd027c9093138'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('locations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_locations_id'), 'locations', ['id'], unique=False)
    op.create_index(op.f('ix_locations_name'), 'locations', ['name'], unique=False)
    op.create_table('sports',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sports_id'), 'sports', ['id'], unique=False)
    op.create_index(op.f('ix_sports_name'), 'sports', ['name'], unique=True)
    op.create_table('user_sport_preferences',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('sport_id', sa.Integer(), nullable=False),
    sa.Column('skill_level', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('notification_enabled', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['sport_id'], ['sports.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'sport_id')
    )
    op.create_table('location_occupancy',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('occupancy_count', sa.Integer(), nullable=True),
    sa.Column('occupancy_percentage', sa.Float(), nullable=True),
    sa.Column('source_type', sa.Enum('SESSION', 'SCRAPING', 'MANUAL', name='datasourcetype'), nullable=False),
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['source_id'], ['sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_location_occupancy_id'), 'location_occupancy', ['id'], unique=False)
    op.create_index(op.f('ix_location_occupancy_timestamp'), 'location_occupancy', ['timestamp'], unique=False)
    op.drop_index('ix_posts_id', table_name='posts')
    op.drop_table('posts')
    op.add_column('sessions', sa.Column('location_id', sa.Integer(), nullable=False))
    op.add_column('sessions', sa.Column('datetime', sa.DateTime(), nullable=True))
    op.add_column('sessions', sa.Column('sport_id', sa.Integer(), nullable=False))
    op.drop_index('ix_sessions_title', table_name='sessions')
    op.create_foreign_key(None, 'sessions', 'locations', ['location_id'], ['id'])
    op.create_foreign_key(None, 'sessions', 'sports', ['sport_id'], ['id'])
    op.drop_column('sessions', 'start_time')
    op.drop_column('sessions', 'created_at')
    op.drop_column('sessions', 'sport_type')
    op.drop_column('sessions', 'end_time')
    op.drop_column('sessions', 'difficulty_level')
    op.drop_column('sessions', 'location')
    op.drop_column('users', 'skill_level')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('skill_level', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('sessions', sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('sessions', sa.Column('difficulty_level', postgresql.ENUM('BEGINNER', 'INTERMEDIATE', 'ADVANCED', name='difficultylevel'), autoincrement=False, nullable=True))
    op.add_column('sessions', sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('sessions', sa.Column('sport_type', postgresql.ENUM('BASKETBALL', 'SOCCER', 'VOLLEYBALL', 'TENNIS', name='sporttype'), autoincrement=False, nullable=True))
    op.add_column('sessions', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('sessions', sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'sessions', type_='foreignkey')
    op.drop_constraint(None, 'sessions', type_='foreignkey')
    op.create_index('ix_sessions_title', 'sessions', ['title'], unique=False)
    op.drop_column('sessions', 'sport_id')
    op.drop_column('sessions', 'datetime')
    op.drop_column('sessions', 'location_id')
    op.create_table('posts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='posts_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='posts_pkey')
    )
    op.create_index('ix_posts_id', 'posts', ['id'], unique=False)
    op.drop_index(op.f('ix_location_occupancy_timestamp'), table_name='location_occupancy')
    op.drop_index(op.f('ix_location_occupancy_id'), table_name='location_occupancy')
    op.drop_table('location_occupancy')
    op.drop_table('user_sport_preferences')
    op.drop_index(op.f('ix_sports_name'), table_name='sports')
    op.drop_index(op.f('ix_sports_id'), table_name='sports')
    op.drop_table('sports')
    op.drop_index(op.f('ix_locations_name'), table_name='locations')
    op.drop_index(op.f('ix_locations_id'), table_name='locations')
    op.drop_table('locations')
    # ### end Alembic commands ###
